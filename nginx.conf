server {
    listen 80;
    server_name 12306.mu-mo.top;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name 12306.mu-mo.top;

    ssl_certificate /etc/letsencrypt/live/*.mu-mo.top/fullchain.cer;
    ssl_certificate_key /etc/letsencrypt/live/*.mu-mo.top/*.mu-mo.top.key;

    # disable SSLv2
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # ciphers' order matters
    ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!aNULL";

    # the Elliptic curve key used for the ECDHE cipher.
    ssl_ecdh_curve secp384r1;

    # let the server choose the cipher
    ssl_prefer_server_ciphers on;

    # turn on the OCSP Stapling and verify
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/*.mu-mo.top/fullchain.cer;

    # http compression method is not secure in https
    # opens you up to vulnerabilities like BREACH, CRIME
    gzip off;

    location /api/v1/ {
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:4321;
    }

    error_log  /mnt/log/nginx/12306.mu-mo.top/error.log;
    access_log /mnt/log/nginx/12306.mu-mo.top/access.log;
}
